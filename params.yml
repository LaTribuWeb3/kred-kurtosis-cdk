---
# Deployment parameters.
# The deployment process is divided into various stages.

# Deploy local L1.
deploy_l1: false

# Deploy zkevm contracts on L1 (and also fund accounts).
deploy_zkevm_contracts_on_l1: true

# Deploy zkevm node and cdk peripheral databases.
deploy_databases: true

# Deploy cdk central/trusted environment.
deploy_cdk_central_environment: true

# Deploy cdk/bridge infrastructure.
deploy_cdk_bridge_infra: true

# Deploy permissionless node.
deploy_zkevm_permissionless_node: false

# Deploy observability stack.
deploy_observability: false

# Deploy Blockscout stack.
deploy_l2_blockscout: false

# Deploy eth load balancer.
deploy_blutgang: false

# Apply workload to the different components of the CDK stack.
apply_workload: false

args:
  # Suffix appended to service names.
  # Note: It should be a string.
  deployment_suffix: "-001"

  # The type of data availability to use.
  # Options:
  # - 'rollup': Transaction data is stored on-chain on L1.
  # - 'cdk-validium': Transaction data is stored off-chain using the CDK DA layer and a DAC.
  # In the future, we would like to support external DA protocols such as Avail, Celestia and Near.
  data_availability_mode: cdk-validium

  # Docker images and repositories used to spin up services.
  zkevm_prover_image: hermeznetwork/zkevm-prover:v6.0.0
  # zkevm_prover_image: hermeznetwork/zkevm-prover:v4.0.19

  zkevm_node_image: hermeznetwork/zkevm-node:v0.6.5
  cdk_node_image: 0xpolygon/cdk-validium-node:0.6.5-cdk
  # cdk_node_image: 0xpolygon/cdk-validium-node:0.5.13-cdk.3

  zkevm_da_image: 0xpolygon/cdk-data-availability:0.0.7
  # zkevm_da_image: 0xpolygon/cdk-data-availability:0.0.6

  zkevm_contracts_image: alfulinku/zkevm-contracts # the tag is automatically replaced by the value of /zkevm_rollup_fork_id/

  # zkevm_agglayer_image: 0xpolygon/agglayer:0.1.3
  zkevm_agglayer_image: ghcr.io/agglayer/agglayer-rs:main
  zkevm_bridge_service_image: hermeznetwork/zkevm-bridge-service:v0.4.2
  panoptichain_image: minhdvu/panoptichain:0.1.47
  zkevm_bridge_ui_image: leovct/zkevm-bridge-ui:multi-network
  zkevm_bridge_proxy_image: haproxy:2.9.7
  zkevm_sequence_sender_image: "hermeznetwork/zkevm-sequence-sender:v0.2.0-RC4"
  cdk_erigon_node_image: hermeznetwork/cdk-erigon:v1.0.9
  toolbox_image: leovct/toolbox:0.0.1
  sequencer_type: "zkevm-node"

  # Port configuration.
  zkevm_hash_db_port: 50061
  zkevm_executor_port: 50071
  zkevm_aggregator_port: 50081
  zkevm_pprof_port: 6060
  zkevm_prometheus_port: 9091
  zkevm_data_streamer_port: 6900
  zkevm_rpc_http_port: 8123
  zkevm_rpc_ws_port: 8133
  zkevm_bridge_rpc_port: 8080
  zkevm_bridge_grpc_port: 9090
  zkevm_bridge_ui_port: 80
  zkevm_agglayer_port: 4444
  zkevm_dac_port: 8484
  blockscout_public_port: 50101

  # Addresses and private keys of the different components.
  # They have been generated using the following command:
  # polycli wallet inspect --mnemonic 'sun track south list surface know wheel rug black gravity cloud miracle' --addresses 9 | tee keys.txt | jq -r '.Addresses[] | [.ETHAddress, .HexPrivateKey] | @tsv' | awk 'BEGIN{split("sequencer,aggregator,claimtxmanager,timelock,admin,loadtest,agglayer,dac,proofsigner",roles,",")} {print "zkevm_l2_" roles[NR] "_address: \"" $1 "\""; print "zkevm_l2_" roles[NR] "_private_key: \"0x" $2 "\"\n"}'
  zkevm_l2_sequencer_address: "0x10257617037187C7C12C88B7BF825F867d0Dd542"
  zkevm_l2_sequencer_private_key: "0x77ed6f23304c04d7cee4c0a1a171d9df27732c34d9c1e5b3a990e224dbce21a5"

  zkevm_l2_aggregator_address: "0x4CD79CCe495172Dd95c7836a16De6CaDA6D44193"
  zkevm_l2_aggregator_private_key: "0x6d5c4aa232557feb8b08d7689f4cb3a5e6dd1ca118f51f3c5374d7caa89346a4"

  zkevm_l2_claimtxmanager_address: "0xf802C4e7570b461Fae822fEb716C5D0D6543F820"
  zkevm_l2_claimtxmanager_private_key: "0x11e2a84d72d98bd13db63d0b5bf5ece544bb0ca7c9b27509b642de3d8a5ab48c"

  zkevm_l2_timelock_address: "0xD5e0eB4E6362BA6Dc8dd1F1a7a48087b03927B7A"
  zkevm_l2_timelock_private_key: "0xe6a5e04f7a755d98fbb41aa9c1bd3020b11d52c7e1b10a0964e15db7f30b0466"

  zkevm_l2_admin_address: "0xDA844AC52b097953B784c22e99D9E9AB7CC5A931"
  zkevm_l2_admin_private_key: "0xa5994f8e20a987eae74b6abdb1188c84e3ee7e86620cb20b6571c3192a5843d3" 

  zkevm_l2_loadtest_address: "0x7C4F55bF6fb634ddf2BF41Fb8075fbd84E78196F"
  zkevm_l2_loadtest_private_key: "0x4b097ad4d2a713cae867ad0129c664abcc62c3b3428ad22964374f565fef5445"

  zkevm_l2_agglayer_address: "0x67651cF8F96Fa7dc1fa74853E3934911c6175b47"
  zkevm_l2_agglayer_private_key: "0x4b21080ba07e87f32eaec011d1a2be6617a4479ad19213799b2ac6a5b6c765dd"

  zkevm_l2_dac_address: "0x987cfef534Df1f009a00EcfFEA7265212c062e09"
  zkevm_l2_dac_private_key: "0xfcb8e64ab0544ed2662ce8ee918666b70615b642bd04d88eb2876ff69b65a205"   

  zkevm_l2_proofsigner_address: "0xa0087b6bC193b9A72ec38361594F1EeEd2a1f4F9"
  zkevm_l2_proofsigner_private_key: "0x6e2781fec3893e29675f61d7a46b6434def67c45c72abfd52578b2ff61514379"

  # Keystore password.
  zkevm_l2_keystore_password: pSnv6Dh5s9ahuzGzH9RoCDrKAMddaX3m

  ## L1 configuration.
  l1_chain_id: 11155111
  l1_preallocated_mnemonic: turkey fancy neck arch gap slide motor apart popular joke cheese split
  l1_funding_amount: 0.003ether
  l1_rpc_url:
    funding_rpc_url: https://ethereum-sepolia.blockpi.network/v1/rpc/public
    bridge_config_toml: https://ethereum-sepolia.blockpi.network/v1/rpc/public
    agglayer_config_toml: https://ethereum-sepolia.blockpi.network/v1/rpc/public
    dac_config_toml: https://ethereum-sepolia-rpc.publicnode.com/
    node_config_toml: https://sepolia.infura.io/v3/e2a47e1289354cc9976ce8aea2caa19c
    sequence_sender_config_toml: https://ethereum-sepolia.blockpi.network/v1/rpc/public
  sequencer:
    l2_block_max_delta_timestamp: 30s
    wait_period_send_sequence: 1m
    last_batch_virtualization_time_max_wait_period: 30m
    l1_block_timestamp_margin: 1m
    frequency_to_monitor_txs: 15s
    max_batches_for_l1: 500

  l1_ws_url:
    dac_config_toml: wss://ethereum-sepolia-rpc.publicnode.com/
  # https://github.com/ethpandaops/ethereum-package/tree/main?tab=readme-ov-file#configuration
  l1_additional_services: [
    # blockscout, # block explorer
    # dora, # beaconchain explorer
    # el_forkmon, # fork monitor tool
  ]
  l1_preset: mainnet
  l1_seconds_per_slot: 12

  ## Rollup configuration.

  # The chain id of the new rollup.
  zkevm_rollup_chain_id: 10101

  # The fork id of the new rollup. It indicates the prover (zkROM/executor) version.
  zkevm_rollup_fork_id: 9

  # The address of the rollup manager contract on L1.
  # If specified, the rollup data will be retrieved from this contract instead of using the contracts service.
  # zkevm_rollup_manager_address: ""
  # # The block number at which the rollup manager contract was deployed.
  # zkevm_rollup_manager_block_number: 0
  # # The address of the global exit root contract on L2.
  # zkevm_global_exit_root_l2_address: ""
  # # The address of the Polygon data committee contract on L1.
  # polygon_data_committee_address: ""

  polygon_zkevm_explorer: https://explorer.kred.la-tribu.xyz/
  l1_explorer_url: https://sepolia.etherscan.io/

  # If this is true, we will automatically deploy an ERC20 contract on
  # L1 to be used at the gasTokenAddress
  zkevm_use_gas_token_contract: true

  ## Permissionless node configuration.
  trusted_sequencer_node_uri: zkevm-node-sequencer-001:6900
  zkevm_aggregator_host: zkevm-node-aggregator-001
  genesis_file: templates/permissionless-node/genesis.json

  ## Tools versions
  polycli_version: v0.1.42

  ## Workload configuration.
  workload_commands: [
    "polycli_loadtest_on_l2.sh t",  # eth transfers
    "polycli_loadtest_on_l2.sh 2",  # erc20 transfers
    "polycli_loadtest_on_l2.sh 7",  # erc721 mints
    "polycli_loadtest_on_l2.sh v3", # uniswapv3 swaps
    "polycli_rpcfuzz_on_l2.sh",     # rpc calls
    "bridge.sh", # bridge tokens l1 -> l2 and l2 -> l1
  ]

  ## ETH Load balancer configuration.
  blutgang_image: makemake1337/blutgang:0.3.5
  blutgang_rpc_port: 55555
  blutgang_admin_port: 55556

  ## Observability alerting configuration.
  # slack_alerts:
    # slack_channel: ""
    # slack_token: ""
    # mention_users: ""
